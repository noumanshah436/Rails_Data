

$ rails new blg
$ generate controller Welcome index

1) resources :articles

2) rails generate controller Articles
  -> now create action new and its view( html file)

3) create form in new.html.erb

4) make create method to get post request

5) create article model (  Models in Rails use a singular name, and their corresponding database tables use a plural name. )
  rails generate model Article title:string text:text
  rails db:migrate 



6) showing article ( show method )
7) Listing article ( index method )

8) adding links to pages

9) add validations
The reason why we added @article = Article.new in the ArticlesController is that otherwise @article would be nil in our view, and calling @article.errors.any? would throw an error.

10) Updating Articles
It is not necessary to pass all the attributes to update. For example, if @article.update(title: 'A new title') was called, Rails would only update the title attribute, leaving all other attributes untouched.

11) Using partials to clean up duplication in views

12) Deleting Articles

11)  Generate comment model
rails generate model Comment commenter:string body:text article:references       ( we can manually add foreign key but this is better)
rails db:migrate

12) Associating Models
   add has many line ina article.db

13) adding route for comments
14) complete comment section
15) partail form comment
16) delete  comment
17) security


**************************

Migrations are Ruby classes that are designed to make it simple to create and modify database tables. Rails uses rake commands to run migrations, and it's possible to undo a migration after it's been applied to your database.


A frequent practice is to place the standard CRUD actions in each controller in the following order: index, show, new, edit, create, update and destroy. You may use any order you choose,



https://github.com/noumanshah436/Rails_Blog

****************

$ rake routes -c articles    (  see all routes of article )

rails g  (  see all generators)

rails -T ( see all available rails commands)


To see where a bundled gem is installed:
bundle info [gemname]

****************


redirect_to article_path(@article)

will redirect to the show method ( http://localhost:3000/articles/2 )

******************

Other authentication methods are available for Rails applications. Two popular authentication add-ons for Rails are the Devise rails engine and the Authlogic gem, along with a number of others.





