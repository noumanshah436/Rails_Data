
https://stackoverflow.com/questions/32158836/how-to-add-roles-to-my-users-in-rails-app

usman@mailinator.com
nouman

*********************************
How to Use Enums in Rails
https://blog.saeloun.com/2022/01/05/how-to-use-enums-in-rails.html#:~:text=An%20enum%20is%20an%20attribute,time%20by%20providing%20dynamic%20methods.


1) rails g migration add_role_to_users
  add_column :users, :role, :integer, default: 0, null: false

  this will also add default role to existing users


2)   enum role: [:user, :moderator,:admin]

:user => 0
:moderator => 1
:admin => 2

3) Commands:


ALl scopes works same ( get all users where status is admin):
  a) User.admin
  b) User.where(role: :admin)
  c) User.where(role: 2)



Set role to moderator
  user = User.last
  user.moderator!
  or
  user.role = :moderator
  user.role = "moderator"

Chack if user is moderator:
  user.moderator?

see all roles( use plural name):
  User.roles

**************************
Array approach is not flexible at all.
The recommended way is to use a hash instead of an array for enums,
because if we change the order of the values, we will break the whole logic inside our Rails app.

enum role: { user: 0, moderator: 1, admin: 2 }

**************************


Sufix:

enum role: { user: 0, moderator: 1, admin: 2 }, suffix: true

now we will use:
user.admin_role?
user.moderator_role?
user.moderator_role!
User.admin_role

**************************

Instead, we can add prefix and suffix as per our requirement and call the methods accordingly.


class Post < ActiveRecord::Base
  enum :status, { draft: 0, published: 1, archived: 2, trashed: 3 }, prefix: true
  enum :category, { free: 0, premium: 1 }, suffix: true
end

Post.free_category

post.status_published?

post.premium_category!

**************************
